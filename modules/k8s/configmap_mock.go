// Code generated by MockGen. DO NOT EDIT.
// Source: configmap.go
//
// Generated by this command:
//
//	mockgen -source=configmap.go -package=k8s -destination=configmap_mock.go
//

// Package k8s is a generated GoMock package.
package k8s

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	v1 "k8s.io/api/core/v1"
)

// MockConfigMapHelper is a mock of ConfigMapHelper interface.
type MockConfigMapHelper struct {
	ctrl     *gomock.Controller
	recorder *MockConfigMapHelperMockRecorder
	isgomock struct{}
}

// MockConfigMapHelperMockRecorder is the mock recorder for MockConfigMapHelper.
type MockConfigMapHelperMockRecorder struct {
	mock *MockConfigMapHelper
}

// NewMockConfigMapHelper creates a new mock instance.
func NewMockConfigMapHelper(ctrl *gomock.Controller) *MockConfigMapHelper {
	mock := &MockConfigMapHelper{ctrl: ctrl}
	mock.recorder = &MockConfigMapHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigMapHelper) EXPECT() *MockConfigMapHelperMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockConfigMapHelper) Create(ctx context.Context, namespace string, configMap *v1.ConfigMap) (*v1.ConfigMap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, namespace, configMap)
	ret0, _ := ret[0].(*v1.ConfigMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockConfigMapHelperMockRecorder) Create(ctx, namespace, configMap any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockConfigMapHelper)(nil).Create), ctx, namespace, configMap)
}

// Delete mocks base method.
func (m *MockConfigMapHelper) Delete(ctx context.Context, namespace, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, namespace, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockConfigMapHelperMockRecorder) Delete(ctx, namespace, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockConfigMapHelper)(nil).Delete), ctx, namespace, name)
}

// Get mocks base method.
func (m *MockConfigMapHelper) Get(ctx context.Context, namespace, name string) (*v1.ConfigMap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, namespace, name)
	ret0, _ := ret[0].(*v1.ConfigMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockConfigMapHelperMockRecorder) Get(ctx, namespace, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockConfigMapHelper)(nil).Get), ctx, namespace, name)
}

// List mocks base method.
func (m *MockConfigMapHelper) List(ctx context.Context, namespace string) (*v1.ConfigMapList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, namespace)
	ret0, _ := ret[0].(*v1.ConfigMapList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockConfigMapHelperMockRecorder) List(ctx, namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockConfigMapHelper)(nil).List), ctx, namespace)
}

// Update mocks base method.
func (m *MockConfigMapHelper) Update(ctx context.Context, namespace string, configMap *v1.ConfigMap) (*v1.ConfigMap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, namespace, configMap)
	ret0, _ := ret[0].(*v1.ConfigMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockConfigMapHelperMockRecorder) Update(ctx, namespace, configMap any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockConfigMapHelper)(nil).Update), ctx, namespace, configMap)
}
