// Code generated by MockGen. DO NOT EDIT.
// Source: ingress.go
//
// Generated by this command:
//
//	mockgen -source=ingress.go -package=k8s -destination=ingress_mock.go
//

// Package k8s is a generated GoMock package.
package k8s

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	v1 "k8s.io/api/networking/v1"
)

// MockIngressHelper is a mock of IngressHelper interface.
type MockIngressHelper struct {
	ctrl     *gomock.Controller
	recorder *MockIngressHelperMockRecorder
	isgomock struct{}
}

// MockIngressHelperMockRecorder is the mock recorder for MockIngressHelper.
type MockIngressHelperMockRecorder struct {
	mock *MockIngressHelper
}

// NewMockIngressHelper creates a new mock instance.
func NewMockIngressHelper(ctrl *gomock.Controller) *MockIngressHelper {
	mock := &MockIngressHelper{ctrl: ctrl}
	mock.recorder = &MockIngressHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIngressHelper) EXPECT() *MockIngressHelperMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIngressHelper) Create(ctx context.Context, namespace string, ingress *v1.Ingress) (*v1.Ingress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, namespace, ingress)
	ret0, _ := ret[0].(*v1.Ingress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIngressHelperMockRecorder) Create(ctx, namespace, ingress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIngressHelper)(nil).Create), ctx, namespace, ingress)
}

// Delete mocks base method.
func (m *MockIngressHelper) Delete(ctx context.Context, namespace, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, namespace, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIngressHelperMockRecorder) Delete(ctx, namespace, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIngressHelper)(nil).Delete), ctx, namespace, name)
}

// Get mocks base method.
func (m *MockIngressHelper) Get(ctx context.Context, namespace, name string) (*v1.Ingress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, namespace, name)
	ret0, _ := ret[0].(*v1.Ingress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIngressHelperMockRecorder) Get(ctx, namespace, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIngressHelper)(nil).Get), ctx, namespace, name)
}

// List mocks base method.
func (m *MockIngressHelper) List(ctx context.Context, namespace string) (*v1.IngressList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, namespace)
	ret0, _ := ret[0].(*v1.IngressList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockIngressHelperMockRecorder) List(ctx, namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIngressHelper)(nil).List), ctx, namespace)
}

// Update mocks base method.
func (m *MockIngressHelper) Update(ctx context.Context, namespace string, ingress *v1.Ingress) (*v1.Ingress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, namespace, ingress)
	ret0, _ := ret[0].(*v1.Ingress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockIngressHelperMockRecorder) Update(ctx, namespace, ingress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIngressHelper)(nil).Update), ctx, namespace, ingress)
}
