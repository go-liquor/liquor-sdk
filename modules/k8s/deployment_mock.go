// Code generated by MockGen. DO NOT EDIT.
// Source: deployment.go
//
// Generated by this command:
//
//	mockgen -source=deployment.go -package=k8s -destination=deployment_mock.go
//

// Package k8s is a generated GoMock package.
package k8s

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	v1 "k8s.io/api/apps/v1"
)

// MockDeploymentHelper is a mock of DeploymentHelper interface.
type MockDeploymentHelper struct {
	ctrl     *gomock.Controller
	recorder *MockDeploymentHelperMockRecorder
	isgomock struct{}
}

// MockDeploymentHelperMockRecorder is the mock recorder for MockDeploymentHelper.
type MockDeploymentHelperMockRecorder struct {
	mock *MockDeploymentHelper
}

// NewMockDeploymentHelper creates a new mock instance.
func NewMockDeploymentHelper(ctrl *gomock.Controller) *MockDeploymentHelper {
	mock := &MockDeploymentHelper{ctrl: ctrl}
	mock.recorder = &MockDeploymentHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeploymentHelper) EXPECT() *MockDeploymentHelperMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockDeploymentHelper) Create(ctx context.Context, namespace string, deployment *v1.Deployment) (*v1.Deployment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, namespace, deployment)
	ret0, _ := ret[0].(*v1.Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockDeploymentHelperMockRecorder) Create(ctx, namespace, deployment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDeploymentHelper)(nil).Create), ctx, namespace, deployment)
}

// Delete mocks base method.
func (m *MockDeploymentHelper) Delete(ctx context.Context, namespace, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, namespace, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockDeploymentHelperMockRecorder) Delete(ctx, namespace, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDeploymentHelper)(nil).Delete), ctx, namespace, name)
}

// Get mocks base method.
func (m *MockDeploymentHelper) Get(ctx context.Context, namespace, name string) (*v1.Deployment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, namespace, name)
	ret0, _ := ret[0].(*v1.Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDeploymentHelperMockRecorder) Get(ctx, namespace, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDeploymentHelper)(nil).Get), ctx, namespace, name)
}

// List mocks base method.
func (m *MockDeploymentHelper) List(ctx context.Context, namespace string) (*v1.DeploymentList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, namespace)
	ret0, _ := ret[0].(*v1.DeploymentList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockDeploymentHelperMockRecorder) List(ctx, namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockDeploymentHelper)(nil).List), ctx, namespace)
}

// Scale mocks base method.
func (m *MockDeploymentHelper) Scale(ctx context.Context, namespace, name string, replicas int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scale", ctx, namespace, name, replicas)
	ret0, _ := ret[0].(error)
	return ret0
}

// Scale indicates an expected call of Scale.
func (mr *MockDeploymentHelperMockRecorder) Scale(ctx, namespace, name, replicas any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scale", reflect.TypeOf((*MockDeploymentHelper)(nil).Scale), ctx, namespace, name, replicas)
}

// Update mocks base method.
func (m *MockDeploymentHelper) Update(ctx context.Context, namespace string, deployment *v1.Deployment) (*v1.Deployment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, namespace, deployment)
	ret0, _ := ret[0].(*v1.Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockDeploymentHelperMockRecorder) Update(ctx, namespace, deployment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDeploymentHelper)(nil).Update), ctx, namespace, deployment)
}
