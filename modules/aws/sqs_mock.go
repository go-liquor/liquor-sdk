// Code generated by MockGen. DO NOT EDIT.
// Source: sqs.go
//
// Generated by this command:
//
//	mockgen -source=sqs.go -package=aws -destination=sqs_mock.go
//

// Package aws is a generated GoMock package.
package aws

import (
	context "context"
	reflect "reflect"

	types "github.com/aws/aws-sdk-go-v2/service/sqs/types"
	gomock "go.uber.org/mock/gomock"
)

// MockSQSClient is a mock of SQSClient interface.
type MockSQSClient struct {
	ctrl     *gomock.Controller
	recorder *MockSQSClientMockRecorder
	isgomock struct{}
}

// MockSQSClientMockRecorder is the mock recorder for MockSQSClient.
type MockSQSClientMockRecorder struct {
	mock *MockSQSClient
}

// NewMockSQSClient creates a new mock instance.
func NewMockSQSClient(ctrl *gomock.Controller) *MockSQSClient {
	mock := &MockSQSClient{ctrl: ctrl}
	mock.recorder = &MockSQSClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSQSClient) EXPECT() *MockSQSClientMockRecorder {
	return m.recorder
}

// DeleteMessage mocks base method.
func (m *MockSQSClient) DeleteMessage(ctx context.Context, queueURL, receiptHandle string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMessage", ctx, queueURL, receiptHandle)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMessage indicates an expected call of DeleteMessage.
func (mr *MockSQSClientMockRecorder) DeleteMessage(ctx, queueURL, receiptHandle any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMessage", reflect.TypeOf((*MockSQSClient)(nil).DeleteMessage), ctx, queueURL, receiptHandle)
}

// GetQueueURL mocks base method.
func (m *MockSQSClient) GetQueueURL(ctx context.Context, queueName string) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQueueURL", ctx, queueName)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQueueURL indicates an expected call of GetQueueURL.
func (mr *MockSQSClientMockRecorder) GetQueueURL(ctx, queueName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueueURL", reflect.TypeOf((*MockSQSClient)(nil).GetQueueURL), ctx, queueName)
}

// ReceiveMessages mocks base method.
func (m *MockSQSClient) ReceiveMessages(ctx context.Context, queueURL string, maxMessages int32) ([]types.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReceiveMessages", ctx, queueURL, maxMessages)
	ret0, _ := ret[0].([]types.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReceiveMessages indicates an expected call of ReceiveMessages.
func (mr *MockSQSClientMockRecorder) ReceiveMessages(ctx, queueURL, maxMessages any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceiveMessages", reflect.TypeOf((*MockSQSClient)(nil).ReceiveMessages), ctx, queueURL, maxMessages)
}

// SendBatchMessages mocks base method.
func (m *MockSQSClient) SendBatchMessages(ctx context.Context, queueURL string, messages []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendBatchMessages", ctx, queueURL, messages)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendBatchMessages indicates an expected call of SendBatchMessages.
func (mr *MockSQSClientMockRecorder) SendBatchMessages(ctx, queueURL, messages any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendBatchMessages", reflect.TypeOf((*MockSQSClient)(nil).SendBatchMessages), ctx, queueURL, messages)
}

// SendMessage mocks base method.
func (m *MockSQSClient) SendMessage(ctx context.Context, queueURL, messageBody string) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", ctx, queueURL, messageBody)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockSQSClientMockRecorder) SendMessage(ctx, queueURL, messageBody any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockSQSClient)(nil).SendMessage), ctx, queueURL, messageBody)
}
