// Code generated by MockGen. DO NOT EDIT.
// Source: kms.go
//
// Generated by this command:
//
//	mockgen -source=kms.go -package=aws -destination=kms_mock.go
//

// Package aws is a generated GoMock package.
package aws

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockKMSClient is a mock of KMSClient interface.
type MockKMSClient struct {
	ctrl     *gomock.Controller
	recorder *MockKMSClientMockRecorder
	isgomock struct{}
}

// MockKMSClientMockRecorder is the mock recorder for MockKMSClient.
type MockKMSClientMockRecorder struct {
	mock *MockKMSClient
}

// NewMockKMSClient creates a new mock instance.
func NewMockKMSClient(ctrl *gomock.Controller) *MockKMSClient {
	mock := &MockKMSClient{ctrl: ctrl}
	mock.recorder = &MockKMSClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKMSClient) EXPECT() *MockKMSClientMockRecorder {
	return m.recorder
}

// Decrypt mocks base method.
func (m *MockKMSClient) Decrypt(ctx context.Context, ciphertext []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decrypt", ctx, ciphertext)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decrypt indicates an expected call of Decrypt.
func (mr *MockKMSClientMockRecorder) Decrypt(ctx, ciphertext any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decrypt", reflect.TypeOf((*MockKMSClient)(nil).Decrypt), ctx, ciphertext)
}

// Encrypt mocks base method.
func (m *MockKMSClient) Encrypt(ctx context.Context, keyID string, plaintext []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encrypt", ctx, keyID, plaintext)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encrypt indicates an expected call of Encrypt.
func (mr *MockKMSClientMockRecorder) Encrypt(ctx, keyID, plaintext any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encrypt", reflect.TypeOf((*MockKMSClient)(nil).Encrypt), ctx, keyID, plaintext)
}

// GenerateDataKey mocks base method.
func (m *MockKMSClient) GenerateDataKey(ctx context.Context, keyID, keySpec string) (*DataKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateDataKey", ctx, keyID, keySpec)
	ret0, _ := ret[0].(*DataKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateDataKey indicates an expected call of GenerateDataKey.
func (mr *MockKMSClientMockRecorder) GenerateDataKey(ctx, keyID, keySpec any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateDataKey", reflect.TypeOf((*MockKMSClient)(nil).GenerateDataKey), ctx, keyID, keySpec)
}

// GenerateRandom mocks base method.
func (m *MockKMSClient) GenerateRandom(ctx context.Context, numberOfBytes int32) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateRandom", ctx, numberOfBytes)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateRandom indicates an expected call of GenerateRandom.
func (mr *MockKMSClientMockRecorder) GenerateRandom(ctx, numberOfBytes any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateRandom", reflect.TypeOf((*MockKMSClient)(nil).GenerateRandom), ctx, numberOfBytes)
}
